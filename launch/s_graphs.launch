<launch>

  <arg name="env" default="$(optenv ENV real)" doc="Define whether we are running on an actual robot or on a virtual replica" />
  <arg name="use_free_space_graph" default="false" doc="Define whether to use free space cluster graph" />
  <arg name="wait_odom_to_map_tf" default="false" />
  <arg name="april_tag_enabled" default="false" />
  <arg name="compute_odom" default="false" />
  <param name="/use_sim_time" value="true" />

  <!-- Inputs -->
  <arg name="imu_data_topic" default="/platform/imu/data" />
  <arg name="point_cloud_topic" default="/platform/velodyne_points" />

  <!-- Outputs -->
  <arg name="slam_odometry_topic" default="/s_graphs/odom_to_map" />
  <arg name="slam_markers_topic" default="/s_graphs/markers" />
  <arg name="slam_map_points_topic" default="/s_graphs/map_points" />
  <arg if="$(eval arg('env') == 'real')" name="base_link_frame" default="body" />
  <arg if="$(eval arg('env') == 'virtual')" name="base_link_frame" default="base_footprint" />

  <arg name="min_seg_points" default="100" />
  <arg name="min_horizontal_inliers" default="800" />
  <arg name="min_vertical_inliers" default="100" />

  <!-- PRE-FILTERING -->
  <node pkg="nodelet" type="nodelet" name="hdl_prefilter_nodelet_manager" args="manager" output="screen" />
  <node pkg="nodelet" type="nodelet" name="hdl_prefilter" args="load s_graphs/PrefilteringNodelet hdl_prefilter_nodelet_manager">
    <rosparam command="load" file="$(find s_graphs)/config/hdl_prefiltering.yaml" />
    <param name="base_link_frame" value="$(arg base_link_frame)" />
    <!-- Inputs -->
    <remap from="/imu/data" to="$(arg imu_data_topic)" />
    <remap from="/velodyne_points" to="$(arg point_cloud_topic)" />
    <!-- Outputs -->
    <remap from="/filtered_points" to="hdl_prefilter/filtered_point_cloud" />
    <remap from="/colored_points" to="hdl_prefilter/colored_point_cloud" />
  </node>

  <!--PLANE SEGMENTATION -->
  <node pkg="nodelet" type="nodelet" name="hdl_plane_seg_nodelet_manager" args="manager" output="screen" />
  <node pkg="nodelet" type="nodelet" name="hdl_plane_segmentor" args="load s_graphs/PlaneSegmentationNodelet hdl_plane_seg_nodelet_manager">
    <param name="plane_extraction_frame_id" value="$(arg base_link_frame)" />
    <param name="min_seg_points" value="$(arg min_seg_points)" />
    <param name="min_horizontal_inliers" value="$(arg min_horizontal_inliers)" />
    <param name="min_vertical_inliers" value="$(arg min_vertical_inliers)" />
    <remap from="velodyne_points" to="/hdl_prefilter/filtered_point_cloud" />
  </node>

  <!-- SCAN MATCHING -->
  <node pkg="nodelet" type="nodelet" name="hdl_scan_matching_nodelet_manager" args="manager" output="screen" />
  <node if="$(arg compute_odom)" pkg="nodelet" type="nodelet" name="hdl_scan_matcher" args="load s_graphs/ScanMatchingOdometryNodelet hdl_scan_matching_nodelet_manager">
    <rosparam command="load" file="$(find s_graphs)/config/hdl_scan_matching.yaml" />
    <param name="publish_tf" value="true" />
    <!-- Inputs -->
    <remap from="/filtered_points" to="/hdl_prefilter/filtered_point_cloud" />
    <!-- Outputs -->
    <remap from="/odom" to="hdl_scan_matcher/odometry" />
    <remap from="/scan_matching_odometry/transform" to="hdl_scan_matcher/transform" />
    <remap from="/scan_matching_odometry/read_until" to="hdl_scan_matcher/read_until" />
    <remap from="/aligned_points" to="hdl_scan_matcher/aligned_points" />
    <remap from="/scan_matching_odometry/status" to="hdl_scan_matcher/status" />
  </node>

  <!-- GRAPH SLAM -->
  <node pkg="nodelet" type="nodelet" name="s_graphs_nodelet_manager" args="manager" output="screen" />
  <node pkg="nodelet" type="nodelet" name="s_graphs" args="load s_graphs/SGraphsNodelet s_graphs_nodelet_manager" output="screen">
    <rosparam command="load" file="$(find s_graphs)/config/s_graphs.yaml" />
    <param if="$(arg wait_odom_to_map_tf)" name="wait_trans_odom2map" value="true" />
    <param unless="$(arg wait_odom_to_map_tf)" name="wait_trans_odom2map" value="false" />
    <param name="odom_frame_id" value="odom" />
    <param name="map_frame_id" value="map" />
    <param name="plane_extraction_frame_id" value="body" />
    <param name="plane_visualization_frame_id" value="body_elevated" />
    <param name="min_seg_points" value="$(arg min_seg_points)" />
    <param name="use_euclidean_filter" value="true" />
    <param name="use_shadow_filter" value="false" />
    <param name="min_horizontal_inliers" value="$(arg min_horizontal_inliers)" />
    <param name="min_vertical_inliers" value="$(arg min_vertical_inliers)" />
    <!-- Inputs -->
    <remap unless="$(arg compute_odom)" from="/odom" to="/platform/odometry"/>
    <remap if="$(arg compute_odom)" from="/odom" to="/hdl_scan_matcher/odometry" />
    <remap from="/filtered_points" to="/hdl_prefilter/filtered_point_cloud" />
    <remap from="/odom2map/initial_pose" to="/odom_to_map/initial_pose" />
    <!-- Outputs -->
    <remap from="/s_graphs/odom2map" to="$(arg slam_odometry_topic)" />
    <remap from="/s_graphs/markers" to="$(arg slam_markers_topic)" />
    <remap from="/s_graphs/map_points" to="$(arg slam_map_points_topic)" />
    <remap from="/s_graphs/read_until" to="s_graphs/read_until" />
  </node>

  <node pkg="s_graphs" name="map2odom_publisher" type="map2odom_publisher.py">
    <param name="odom_frame_id" value="odom" />
    <param name="map_frame_id" value="map" />
    <remap from="/s_graphs/odom2map" to="/s_graphs/odom_to_map" />
  </node>

  <node pkg="tf" type="static_transform_publisher" name="body_to_body_elevated" args="0 0 10.0 0 0 0 body body_elevated 100" />


</launch>