{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LiDAR S-Graphs","text":"<p>LiDAR Situational Graphs (S-Graphs) is a ROS2 package for generating in real-time four-layered hierarchical factor graphs for single or multi-floor scenes. It reepresents a scene graph using 3D LiDAR which includes Keyframes registring the robot poses, Walls which map wall planes, Rooms Layer constraining the wall planes using 4 wall-room or 2 wall-room factors, Floors constraining the rooms within a given floor level. It also supports several graph constraints, such as GPS, IMU acceleration (gravity vector), IMU orientation (magnetic sensor). We have tested this package mostly with Ouster OS-1 and Velodyne (VLP16) sensors in structured indoor environments. This work is a fork of hdl_graph_slam which as previously in ROS1.</p>      Your browser does not support the video tag."},{"location":"#published-papers","title":"\ud83d\udcd6 Published Papers","text":"S-Graphs 2.0 -- A Hierarchical-Semantic Optimization and Loop Closure for SLAM        @misc{bavle2025sgraphs20hierarchicalsemantic,       title={S-Graphs 2.0 -- A Hierarchical-Semantic Optimization and Loop Closure for SLAM},        author={Hriday Bavle and Jose Luis Sanchez-Lopez and Muhammad Shaheer and Javier Civera and Holger Voos},       year={2025},       eprint={2502.18044},       archivePrefix={arXiv},       primaryClass={cs.RO},       url={https://arxiv.org/abs/2502.18044},  }   S-Graphs+: Real-time Localization and Mapping leveraging Hierarchical Representations        @ARTICLE{10168233,      author={Bavle, Hriday and Sanchez-Lopez, Jose Luis and Shaheer, Muhammad and Civera, Javier and Voos, Holger},      journal={IEEE Robotics and Automation Letters},      title={S-Graphs+: Real-Time Localization and Mapping Leveraging Hierarchical Representations},      year={2023},      volume={8},      number={8},      pages={4927-4934},      doi={10.1109/LRA.2023.3290512}}   Situational Graphs for Robot Navigation in Structured Indoor Environments        @ARTICLE{9826367,         author={Bavle, Hriday and Sanchez-Lopez, Jose Luis and Shaheer, Muhammad and Civera, Javier and Voos, Holger},         journal={IEEE Robotics and Automation Letters},         title={Situational Graphs for Robot Navigation in Structured Indoor Environments},         year={2022},         volume={7},         number={4},         pages={9107-9114},         doi={10.1109/LRA.2022.3189785}}"},{"location":"1.installation/","title":"\u2699\ufe0f Installation","text":"<p>Info</p> <p>S-Graphs has only been tested on Ubuntu 22.04, ROS2 Foxy, Humble Distros.</p>"},{"location":"1.installation/#from-source","title":"\ud83d\udce6 From Source","text":"<p>Important</p> <p>Before proceeding, make sure you have <code>rosdep</code> installed. You can install it using <code>sudo apt-get install python3-rosdep</code> In addition, ssh keys are needed to be configured on you GitHub account. If you haven't yet configured ssh keys, follow this tutorial</p> <ol> <li>Update Rosdep:</li> </ol> <pre><code>rosdep init\nrosdep update --include-eol-distros\n</code></pre> <ol> <li>Create a ROS2 workspace for S-Graphs</li> </ol> <pre><code>mkdir -p $HOME/workspaces &amp;&amp; cd $HOME/workspaces\n</code></pre> <ol> <li>Clone the S-Graphs repository into the created workspace</li> </ol> <pre><code>git clone git@github.com:snt-arg/lidar_situational_graphs.git -b feature/multi_floor s_graphs\n</code></pre> <p>Info</p> <p>If you have Nvidia GPU please install CUDA from this link. This code has only been tested with CUDA 11.8. If you dont have CUDA S-Graphs will use CPU only.</p> <ol> <li>Install required dependencies.</li> </ol> <p>Info</p> <p>Lidar SGraphs can can take some time to build depending on the platform and may consume a lot of memory. If your computer does not have a lot of RAM is it advised to limit the number of threads make uses with <code>export MAKEFLAGS=\"-j &lt;n&gt;</code>, where <code>&lt;n&gt;</code> should be replaced with the max of number of CPUs.</p> <pre><code>cd s_graphs &amp;&amp; source /opt/ros/$ROS_DISTRO/setup.sh &amp;&amp; ./setup.sh\n</code></pre> <p>Info</p> <p>If you want to compile with debug traces (from backward_cpp) run: <pre><code>colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo -DUSE_RGB_CLOUD=ON\n</code></pre></p>"},{"location":"1.installation/#optional-ros1-install-old-version-of-room-segmentation","title":"Optional ROS1 Install (Old Version of Room Segmentation)","text":"&gt; [!NOTE] &gt; This is an optional older version of room segmentation algorithm which requires ROS1 noetic. There is no hard dependecy on this package so you can easily ignore this step.  ##### Download ROS Bridge  <pre><code>source /opt/ros/foxy/setup.bash &amp;&amp; sudo apt install ros-foxy-ros1-bridge\n</code></pre>  ##### Installation on ROS1  !!! warning      Before following the instructions from below, ensure that you are in a fresh     terminal, **without ROS2 sourced**.  1. Create a ROS1 workspace for S-Graphs  <pre><code>mkdir -p $HOME/workspaces/s_graphs_ros1_ws/src &amp;&amp; cd $HOME/workspaces/s_graphs_ros1_ws/src &amp;&amp; source /opt/ros/noetic/setup.bash\n</code></pre>  2. Clone the S-Graphs repository into the created workspace  <pre><code>git clone git@github.com:snt-arg/lidar_situational_graphs.git -b feature/multi_floor s_graphs\n</code></pre>  3. Install required dependencies using `vcstool`  <pre><code>cd s_graphs &amp;&amp; vcs import --recursive ../ &lt; .rosinstall_ros1\n</code></pre>  4. Install required ROS packages  <pre><code>cd ../../ &amp;&amp; rosdep install --from-paths src --ignore-src -y -r\n</code></pre>  5. Install `pcl_ros`  <pre><code>sudo apt install ros-noetic-pcl-ros\n</code></pre>  6. Build workspace  !!! warning      Make sure s_graphs_ros1_ws is built in Release otherwise the room extraction won't work properly.  <pre><code>catkin config --cmake-args -DCMAKE_BUILD_TYPE=Release &amp;&amp; catkin build\n</code></pre>"},{"location":"1.installation/#unit-tests","title":"\ud83e\uddea Unit Tests","text":"<p>Some unit tests are available. In case you want to add additional tests, run the following command:</p> <pre><code>colcon test --packages-select s_graphs --event-handler=console_direct+\n</code></pre>"},{"location":"2.datasets/","title":"\ud83d\ude80 Example on Datasets","text":"<p>Warning</p> <p>For execution of the experiments we use mprocs, which makes the process of launching different processes easier.</p>"},{"location":"2.datasets/#real-dataset","title":"Real Dataset","text":"<p>Dataset Download</p> <p>Download real dataset using this link and store it in the folder <code>~/Downloads/real</code>, the below mprocs script will not work otherwise.</p> <pre><code>cd $HOME/workspaces/s_graphs &amp;&amp; mprocs --config .real_mprocs.yaml\n</code></pre>"},{"location":"3.getting_started/","title":"\ud83d\udee0\ufe0f Run S-Graphs On Your Data","text":"<ol> <li>Define the transformation between your sensors (LIDAR, IMU, GPS) and base_link of your system using static_transform_publisher (see line, s_graphs_launch.py). All the sensor data will be transformed into the common <code>base_link</code> frame, and then fed to the SLAM algorithm. Note: <code>base_link</code> frame in virtual dataset is set to <code>base_footprint</code> and in real dataset is set to <code>body</code>. You can set the <code>frames</code>, <code>topics</code> for your dataset easily during the launch execution as follows:</li> </ol> <pre><code>ros2 launch lidar_situational_graphs s_graphs_launch.py compute_odom:=true lidar_topic:=/rs_lidar/points\n</code></pre> <ol> <li>If you have an odometry source convert it to base ENU frame, then set the arg <code>compute_odom</code> to <code>false</code> in <code>s_graphs_ros2_launch.py</code> and then remap odom topic in s_graphs_node like</li> </ol> <pre><code>ros2 launch lidar_situational_graphs s_graphs_launch.py compute_odom:=false lidar_topic:=/rs_lidar/points odom_topic:=/odom\n</code></pre> <p>Info</p> <p>If you want to visualize the tfs correctly from your odom source, you MUST provide a tf from the <code>odom</code> to <code>base_link</code> frame.</p>"},{"location":"4.docker/","title":"\ud83d\udc33 Docker","text":""},{"location":"4.docker/#build-docker-image","title":"Build Docker Image","text":"<ol> <li>Create a ROS2 workspace for S-Graphs</li> </ol> <pre><code>mkdir -p $HOME/workspaces &amp;&amp; cd $HOME/workspaces\n</code></pre> <ol> <li>Change directory to where Dockerfile is located in <code>s_graphs</code></li> </ol> <pre><code>git clone git@github.com:snt-arg/lidar_situational_graphs.git -b feature/multi_floor s_graphs &amp;&amp; cd $HOME/workspaces/s_graphs/docker/foxy_noetic\n</code></pre> <ol> <li>Build image</li> </ol> <pre><code>docker build -t sntarg/s_graphs .\n</code></pre> <p>Note</p> <p>There are two docker files, one for foxy and another for humble. The above commands build the foxy image, you use the same commands to build the humble image if needed.</p>"},{"location":"4.docker/#running-s-graphs-with-docker","title":"Running S-Graphs with Docker","text":"<ol> <li>Create a container for the s_graphs image.</li> </ol> <pre><code>docker run -dit --volume=/tmp/.X11-unix:/tmp/.X11-unix:rw --network=host -e DISPLAY=$DISPLAY --name s_graphs_container sntarg/s_graphs\n</code></pre> <ol> <li> <p>Download the dataset you desire from above to your local machine.</p> </li> <li> <p>Move the rosbag inside docker container</p> </li> </ol> <pre><code>docker cp ~/Downloads/real s_graphs_container:/root/Downloads/real # For real dataset\n# OR\ndocker cp ~/Downloads/virtual s_graphs_container:/root/Downloads/virtual # For virtual dataset\n</code></pre> <ol> <li>Execute the container</li> </ol> <pre><code>docker exec -ti s_graphs_container bash\n</code></pre> <p>Danger</p> <p>If rviz2 doesnt open inside the docker, do <code>xhost +</code> in a terminal of your pc and then relaunch the mprocs command inside docker.</p> <ol> <li>Run mprocs</li> </ol> <pre><code>mprocs_real\n</code></pre>"},{"location":"5.ros_related/","title":"\ud83e\udd16 ROS Related","text":""},{"location":"5.ros_related/#subscribed-topics","title":"\ud83d\udce5 Subscribed Topics","text":""},{"location":"5.ros_related/#s_graphs-node","title":"<code>s_graphs</code> node","text":"Topic name Message Type Description <code>/odom</code> nav_msgs/Odometry The odometry from the robot. <code>/filtered_points</code> sensor_msgs/PointCloud2 The filtered data from the LiDAR sensor."},{"location":"5.ros_related/#room_segmentation-node","title":"<code>room_segmentation</code> node","text":"Topic name Message Type Description <code>/s_graphs/map_planes</code> s_graphs/PlanesData Planes seen by the current robot keyframe."},{"location":"5.ros_related/#floor_plan-node","title":"<code>floor_plan</code> node","text":"Topic name Message Type Description <code>/s_graphs/all_map_planes</code> visualization_msgs/MarkerArray All the planes that have been seen by the robot."},{"location":"5.ros_related/#published-topics","title":"\ud83d\udce4 Published Topics","text":""},{"location":"5.ros_related/#s_graphs-node_1","title":"<code>s_graphs</code> node","text":"Topic name Message Type Description <code>/s_graphs/markers</code> visualization_msgs/MarkerArray These markers represent the different s_graphs layers. <code>/s_graphs/odom2map</code> geometry_msgs/TransformStamped The estimated drift of the robot within its map frame (world). <code>/s_graphs/odom_pose_corrected</code> geometry_msgs/PoseStamped The optimized/drift-free pose of the robot once odom2map is applied. <code>/s_graphs/odom_path_corrected</code> nav_msgs/Path The optimized/drift-free pose path of the robot once the odom2map is applied. <code>/s_graphs/map_points</code> sensor_msgs/PointCloud2 The projected 3D points using the optimized robot pose. <code>/s_graphs/map_planes</code> s_graphs/PlanesData Planes seen by the current robot keyframe. <code>/s_graphs/all_map_planes</code> s_graphs/PlanesData All the planes that have been seen by the robot."},{"location":"5.ros_related/#room_segmentation-node_1","title":"<code>room_segmentation</code> node","text":"Topic name Message Type Description <code>/room_segmentation/room_data</code> s_graphs/RoomsData Contains all the necessary information about the rooms on a given floor."},{"location":"5.ros_related/#floor_plan-node_1","title":"<code>floor_plan</code> node","text":"Topic name Message Type Description <code>/floor_plan/floor_data</code> s_graphs/RoomData Contains all the necessary information about each floor."},{"location":"5.ros_related/#ros-services","title":"\ud83d\udd04 ROS Services","text":"Topic name Message Type Description <code>/s_graphs/dump</code> s_graphs/DumpGraph Save all the internal data (point clouds, floor coeffs, odoms, and pose graph) to a directory. Topic name Message Type Description <code>/s_graphs/save_map</code> s_graphs/SaveMap Save the generated 3D map as a PCD file."},{"location":"5.ros_related/#ros-parameters","title":"\u2699\ufe0f ROS Parameters","text":"<p>All the configurable parameters are listed in config folder as ros params.</p>"},{"location":"5.ros_related/#published-tfs","title":"\ud83c\udf10 Published TFs","text":"<ul> <li> <p><code>map2odom</code>: The transform published between the map frame and the odom frame after the corrections have been applied.</p> </li> <li> <p>The entire <code>tf_tree</code> for the virtual experiment can be seen in the figure below.</p> </li> </ul> <p></p>"}]}